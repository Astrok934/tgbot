import os
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã (–±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway)
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

if not TOKEN or not OPENROUTER_API_KEY:
    raise ValueError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_TOKEN –∏ OPENROUTER_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway!")

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_histories = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_moscow_time() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ –ú–°–ö (UTC+3)"""
    return (datetime.utcnow() + timedelta(hours=3)).strftime("%H:%M")

async def get_ai_response(user_id: int, text: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ –ò–ò —á–µ—Ä–µ–∑ OpenRouter —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞"""
    history = user_histories.get(user_id, [{
        "role": "system",
        "content": "–¢—ã –•–∞–π–∫—É ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ —Å —ç–º–æ–¥–∑–∏ ü¶ä."
    }])
    
    history.append({"role": "user", "content": text})
    
    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "HTTP-Referer": "https://github.com/Astrok934/tgbot",  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                "X-Title": "Telegram Bot"
            },
            json={
                "model": "anthropic/claude-3-haiku",
                "messages": history[-6:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
            },
            timeout=10
        )
        response.raise_for_status()
        reply = response.json()["choices"][0]["message"]["content"]
        history.append({"role": "assistant", "content": reply})
        user_histories[user_id] = history[-6:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        return reply
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenRouter: {str(e)}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start"""
    help_text = (
        "ü¶ä –ü—Ä–∏–≤–µ—Ç! –Ø –•–∞–π–∫—É ‚Äî —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫.\n"
        "‚Ä¢ –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤—Å—ë\n"
        "‚Ä¢ –í –≥—Ä—É–ø–ø–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π ¬´–•–∞–π–∫—É, –≤–æ–ø—Ä–æ—Å¬ª\n"
        "‚Ä¢ /time ‚Äî –≤—Ä–µ–º—è –ø–æ –ú–°–ö"
    )
    await update.message.reply_text(help_text)

async def time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /time"""
    await update.message.reply_text(f"‚è∞ –ú–æ—Å–∫–≤–∞: {get_moscow_time()}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return

    message = update.effective_message
    user_text = message.text.strip()
    
    # –í –≥—Ä—É–ø–ø–∞—Ö —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä "–•–∞–π–∫—É,"
    if message.chat.type != "private":
        if not user_text.lower().startswith(('—Ö–∞–π–∫—É,', '—Ö–∞–π–∫—É ')):
            return
        user_text = user_text.split(maxsplit=1)[1] if ' ' in user_text else user_text.split(',', 1)[1].strip()
    
    try:
        response = await get_ai_response(update.effective_user.id, user_text)
        await message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        await message.reply_text("üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("time", time))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
